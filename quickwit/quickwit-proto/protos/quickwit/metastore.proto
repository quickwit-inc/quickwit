// Copyright (C) 2023 Quickwit, Inc.
//
// Quickwit is offered under the AGPL v3.0 and as commercial software.
// For commercial licensing, contact us at hello@quickwit.io.
//
// AGPL:
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package quickwit.metastore;

service MetastoreService {
  // Creates an index.
  rpc create_index(CreateIndexRequest) returns (CreateIndexResponse);

  // Gets an index metadata.
  rpc index_metadata(IndexMetadataRequest) returns (IndexMetadataResponse);

  // Gets an indexes metadatas.
  rpc list_indexes(ListIndexesRequest) returns (ListIndexesResponse);

  // Deletes an index
  rpc delete_index(DeleteIndexRequest) returns (EmptyResponse);

  // Gets splits from index.
  rpc list_splits(ListSplitsRequest) returns (ListSplitsResponse);

  // Stages several splits.
  rpc stage_splits(StageSplitsRequest) returns (EmptyResponse);

  // Publishes split.
  rpc publish_splits(PublishSplitsRequest) returns (EmptyResponse);

  // Marks splits for deletion.
  rpc mark_splits_for_deletion(MarkSplitsForDeletionRequest) returns (EmptyResponse);

  // Deletes splits.
  rpc delete_splits(DeleteSplitsRequest) returns (EmptyResponse);

  // Adds source.
  rpc add_source(AddSourceRequest) returns (EmptyResponse);

  // Toggles source.
  rpc toggle_source(ToggleSourceRequest) returns (EmptyResponse);

  // Removes source.
  rpc delete_source(DeleteSourceRequest) returns (EmptyResponse);

  // Resets source checkpoint.
  rpc reset_source_checkpoint(ResetSourceCheckpointRequest) returns (EmptyResponse);

  // Gets last opstamp for a given `index_id`.
  rpc last_delete_opstamp(LastDeleteOpstampRequest) returns (LastDeleteOpstampResponse);

  // Creates a delete task.
  rpc create_delete_task(DeleteQuery) returns (DeleteTask);

  // Updates splits `delete_opstamp`.
  rpc update_splits_delete_opstamp(UpdateSplitsDeleteOpstampRequest) returns (EmptyResponse);

  // Lists delete tasks with `delete_task.opstamp` > `opstamp_start` for a given `index_id`.
  rpc list_delete_tasks(ListDeleteTasksRequest) returns (ListDeleteTasksResponse);
}

message EmptyResponse {}

message CreateIndexRequest {
  string index_id = 1;
  string index_config_json = 2;
}

message CreateIndexResponse {
  string index_uid = 1;
}

message IndexMetadataRequest {
  string index_id = 1;
  optional string incarnation_id = 2;
}

message IndexMetadataResponse {
  // TODO: Use `bytes` in conjunction with `Bytes`.
  string index_metadata_json = 1;
}

message ListIndexesRequest {}

message ListIndexesResponse {
  // TODO: Use `bytes` in conjunction with `Bytes`.
  string indexes_metadata_json = 1;
}

message DeleteIndexRequest {
  string index_uid = 1;
}

message ListSplitsRequest {
  string index_uid = 1;
  optional string list_splits_query_json = 2;
}

message ListSplitsResponse {
  // TODO: Use `bytes` in conjunction with `Bytes`.
  string splits_metadata_json = 1;
}

message StageSplitsRequest {
  string index_uid = 1;
  string splits_metadata_json = 2;
}

message PublishSplitsRequest {
  string index_uid = 1;
  repeated string staged_split_ids = 2;
  repeated string replaced_split_ids = 3;
  optional SourceCheckpointDelta checkpoint_delta = 5;

  // Reserved fields due to deprecation
  reserved 4;
}

message SourceCheckpointDelta {
  string source_id = 1;
  map<string, PartitionDelta> partition_deltas = 2; // A map from partition ID to partition delta.
}

message PartitionDelta {
  string from_position_exclusive = 1;
  string to_position_inclusive = 2;
}

message MarkSplitsForDeletionRequest {
  string index_uid = 2;
  repeated string split_ids = 3;
}

message DeleteSplitsRequest {
  string index_uid = 2;
  repeated string split_ids = 3;
}

message AddSourceRequest {
  string index_uid = 1;
  string source_config_json = 2;
}

message ToggleSourceRequest {
  string index_uid = 1;
  string source_id = 2;
  bool enable = 3;
}

message DeleteSourceRequest {
  string index_uid = 1;
  string source_id = 2;
}

message ResetSourceCheckpointRequest {
  string index_uid = 1;
  string source_id = 2;
}


///
/// Delete tasks.
///

message DeleteTask {
  int64 create_timestamp = 1;
  uint64 opstamp = 2;
  DeleteQuery delete_query = 3;
}

message DeleteQuery {
  // Index ID.
  string index_uid = 1;
  // If set, restrict search to documents with a `timestamp >= start_timestamp`.
  optional int64 start_timestamp = 2;
  // If set, restrict search to documents with a `timestamp < end_timestamp``.
  optional int64 end_timestamp = 3;
  // Query text. The query language is that of tantivy.
  // Query AST serialized in JSON
  string query_ast = 6;

  // Reserved fields due to deprecation
  reserved 4, 5;
}

message UpdateSplitsDeleteOpstampRequest {
  string index_uid = 1;
  repeated string split_ids = 2;
  uint64 delete_opstamp = 3;
}

message LastDeleteOpstampRequest {
  string index_uid = 1;
}

message LastDeleteOpstampResponse {
  uint64 last_delete_opstamp = 1;
}

message ListDeleteTasksRequest {
  string index_uid = 1;
  uint64 opstamp_start = 2;
}

message ListDeleteTasksResponse {
  repeated DeleteTask delete_tasks = 1;
}
